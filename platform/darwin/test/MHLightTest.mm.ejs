<%
  const type = locals.type;
  const properties = locals.properties;
-%>
// This file is generated.
// Edit platform/darwin/scripts/generate-style-code.js, then run `make darwin-style-code`.
#import <XCTest/XCTest.h>
#import <Mapbox.h>

#import "MHLight_Private.h"

#import "../../darwin/src/NSDate+MHAdditions.h"

#import <mbgl/style/light.hpp>
#import <mbgl/style/types.hpp>
#include <mbgl/style/transition_options.hpp>

@interface MHLightTest : XCTestCase

@end

@implementation MHLightTest

- (void)testProperties {

    MHTransition defaultTransition = MHTransitionMake(0, 0);
    MHTransition transition = MHTransitionMake(6, 3);
    mbgl::style::TransitionOptions transitionOptions { { MHDurationFromTimeInterval(6) }, { MHDurationFromTimeInterval(3) } };

<% for (const property of properties) { -%>
    // <%- property.name %>
    {
        mbgl::style::Light light;
        MHLight *mglLight = [[MHLight alloc] initWithMBGLLight:&light];
        auto lightFromMHLight = mglLight.mbglLight;

        XCTAssertEqual(light.getDefault<%- camelize(property.name) -%>(), lightFromMHLight.get<%- camelize(property.name) -%>());
<% if (property.transition) { -%>
        auto <%- camelizeWithLeadingLowercase(property.name) -%>Transition = lightFromMHLight.get<%- camelize(property.name) -%>Transition();
        XCTAssert(<%- camelizeWithLeadingLowercase(property.name) -%>Transition.delay && MHTimeIntervalFromDuration(*<%- camelizeWithLeadingLowercase(property.name) -%>Transition.delay) == defaultTransition.delay);
        XCTAssert(<%- camelizeWithLeadingLowercase(property.name) -%>Transition.duration && MHTimeIntervalFromDuration(*<%- camelizeWithLeadingLowercase(property.name) -%>Transition.duration) == defaultTransition.duration);

<% } -%>
<% if (property.type == "enum" && property.default) { -%>
        XCTAssertEqual(mglLight.<%- camelizeWithLeadingLowercase(property.name) -%>.expressionType, NSConstantValueExpressionType, @"mglLight.<%- camelizeWithLeadingLowercase(property.name) -%> isnâ€™t a constant value expression.");
        XCTAssertEqualObjects(mglLight.<%- camelizeWithLeadingLowercase(property.name) -%>.constantValue, @"<%- property.default -%>");

<% } -%>
<% if (property.type == "array") { -%>
        std::array<float, 3> positionArray = { { 6, 180, 90 } };
        mbgl::style::Position position = { positionArray };
        mbgl::style::PropertyValue<mbgl::style::Position> propertyValue = { position };
<% } else { -%>
        mbgl::style::PropertyValue<<%- mbglType(property) %>> propertyValue = { <%- mbglTestValue(property, type) %> };
<% } -%>
        light.set<%- camelize(property.name) -%>(propertyValue);
<% if (property.transition) { -%>
        light.set<%- camelize(property.name) -%>Transition(transitionOptions);

<% } -%>
        mglLight = [[MHLight alloc] initWithMBGLLight:&light];
        lightFromMHLight = mglLight.mbglLight;

        XCTAssertEqual(light.get<%- camelize(property.name) -%>(), lightFromMHLight.get<%- camelize(property.name) -%>());
<% if (property.transition) { -%>
        <%- camelizeWithLeadingLowercase(property.name) -%>Transition = lightFromMHLight.get<%- camelize(property.name) -%>Transition();
        XCTAssert(<%- camelizeWithLeadingLowercase(property.name) -%>Transition.delay && MHTimeIntervalFromDuration(*<%- camelizeWithLeadingLowercase(property.name) -%>Transition.delay) == transition.delay);
        XCTAssert(<%- camelizeWithLeadingLowercase(property.name) -%>Transition.duration && MHTimeIntervalFromDuration(*<%- camelizeWithLeadingLowercase(property.name) -%>Transition.duration) == transition.duration);

<% } -%>
    }

<% } -%>
}

- (void)testValueAdditions {
    MHSphericalPosition position = MHSphericalPositionMake(1.15, 210, 30);

    XCTAssertEqual([NSValue valueWithMHSphericalPosition:position].MHSphericalPositionValue.radial, position.radial);
    XCTAssertEqual([NSValue valueWithMHSphericalPosition:position].MHSphericalPositionValue.azimuthal, position.azimuthal);
    XCTAssertEqual([NSValue valueWithMHSphericalPosition:position].MHSphericalPositionValue.polar, position.polar);
<% for (const property of properties) { -%>
<% if (property.type == "enum") { -%>
<% for (const value in property.values) { -%>
    XCTAssertEqual([NSValue valueWithMHLight<%- camelize(property.name) %>:MHLight<%- camelize(property.name) %><%- camelize(value) %>].MHLight<%- camelize(property.name) %>Value, MHLight<%- camelize(property.name) %><%- camelize(value) %>);
<% } -%>
<% } -%>
<% } -%>
}

@end
